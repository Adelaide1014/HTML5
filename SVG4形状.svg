<?xml version="1.0" standalone="no"?>
<!--代码注释不能放在<?xml>标签的前面，否则格式错误-->
<!--所有的开启标签必须有关闭标签！-->
<!-- SVG 文件中必须使用该种格式的注释，否则会无法正常显示-->
<!-- 第一行包含了 XML 声明。请注意 standalone 属性！该属性规定此 SVG 文件是否是“独立的”，或含有对外部文件的引用。-->
<!-- standalone="no" 意味着 SVG 文档会引用一个外部文件 - 在这里，是 DTD 文件。-->

<!--SVG 文件必须使用 .svg 后缀来保存-->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!--SVG 代码以 <svg> 元素开始，包括开启标签 <svg> 和关闭标签 </svg> 。这是根元素。-->
<!--width 和 height 属性可设置此 SVG 文档的宽度和高度。-->
<!--version 属性可定义所使用的 SVG 版本，xmlns 属性可定义 SVG 命名空间。-->
<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg">

<title>SVG形状</title>
<text  y="30" style="">注意：从图上也可以看出，svg中的元素是按照从上往下开始执行的，后者会覆盖前者，可以使用透明来处理。</text>
<text  y="50" style="">可以用定义坐标的方式来定义图形的位置</text>

<text x="20" y="70" style="font-weight:bold;">SVG形状:rect</text>
<!--
    x 属性定义矩形的左侧位置（例如，x="0" 定义矩形到浏览器窗口左侧的距离是 0px）
    y 属性定义矩形的顶端位置（例如，y="0" 定义矩形到浏览器窗口顶端的距离是 0px）
    CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1）
    CSS 的 stroke-opacity 属性定义笔触颜色的透明度（合法的范围是：0 - 1）
-->
<rect x="20" y="100" width="200" height="100" 
style="fill:blue;stroke:pink;stroke-width:5;fill-opacity:0.1;stroke-opacity:0.9"/>

<!--  CSS 的 opacity 属性定义整个元素的透明值（合法的范围是：0 - 1）-->
<rect x="20" y="210" width="200" height="100"
style="fill:blue;stroke:pink;stroke-width:5;opacity:0.7"/>

<!--创建带有圆角的矩形-->
<!-- rx 和 ry 属性可使矩形产生圆角。-->
<rect x="20" y="320" rx="20" ry="20" width="200" height="100" 
style="fill:red;stroke:black;stroke-width:5;opacity:0.5"/>

<text x="250" y="70" style="font-weight:bold;">SVG形状:circle</text>
<!--SVG 的 <circle> 用来创建一个圆。cx 和 cy 属性定义圆中心的 x 和 y 坐标。如果忽略这两个属性，那么圆点会被设置为 (0, 0)。r 属性定义圆的半径。-->
<!--stroke 和 stroke-width 属性控制如何显示形状的轮廓。我们把圆的轮廓设置为 2px 宽，黑边框。-->
<!--fill 属性设置形状内的颜色。我们把填充颜色设置为红色。-->
<circle cx="300" cy="250" r="40" stroke="black" stroke-width="2" fill="red"/>

<!-- 
    cx 属性定义圆点的 x 坐标
    cy 属性定义圆点的 y 坐标
    rx 属性定义水平半径
    ry 属性定义垂直半径
-->
<text x="380" y="70" style="font-weight:bold;">SVG形状:ellipse</text>
<ellipse cx="440" cy="150" rx="60" ry="40" 
style="fill:rgb(200,80,50);stroke:rgb(0,0,80);stroke-width:2"/>

<!--
    x1 属性在 x 轴定义线条的开始
    y1 属性在 y 轴定义线条的开始
    x2 属性在 x 轴定义线条的结束
    y2 属性在 y 轴定义线条的结束
-->
<text x="540" y="70" style="font-weight:bold;">SVG形状:line</text>
<line x1="540" y1="70" x2="640" y2="300"
style="stroke:rgb(99,99,99);stroke-width:2"/>

<!--polygon标签用来创建含有不少于三个边的图形。-->
<!--points 属性定义多边形每个角的 x 和 y 坐标-->
<text x="660" y="70" style="font-weight:bold;">SVG形状:polygon</text>
<polygon points="720,100 800,210 670,250"
style="fill:#cccccc;stroke:#000000;stroke-width:1"/>

<polygon points="720,300 800,510 670,550 623,534"
style="fill:#cccccc;stroke:#000000;stroke-width:1"/>

<!--polyline标签用来创建仅包含直线的形状。-->
<text x="820" y="70" style="font-weight:bold;">SVG形状:polyline</text>
<polyline points="850,70 850,100 900,100 900,150 950,150 990,600"
style="fill:white;stroke:red;stroke-width:2"/>

<!--path标签用来创建仅包含直线的形状。
	下面的命令可用于路径数据：
    M = moveto
    L = lineto
    H = horizontal lineto
    V = vertical lineto
    C = curveto
    S = smooth curveto
    Q = quadratic Belzier curve
    T = smooth quadratic Belzier curveto
    A = elliptical Arc
    Z = closepath
            以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。
-->

<text x="990" y="70" style="font-weight:bold;">SVG形状:path</text>
<path d="M1050 150 L950 350 L1150 350 Z" />
<!--由于绘制路径的复杂性，因此强烈建议您使用 SVG 编辑器来创建复杂的图形。-->
<text x="250" y="420" style="font-weight:bold;">SVG形状:path-螺旋</text>
<path d="M153 334
C153 334 151 334 151 334
C151 339 153 344 156 344
C164 344 171 339 171 334
C171 322 164 314 156 314
C142 314 131 322 131 334
C131 350 142 364 156 364
C175 364 191 350 191 334
C191 311 175 294 156 294
C131 294 111 311 111 334
C111 361 131 384 156 384
C186 384 211 361 211 334
C211 300 186 274 156 274"
style="fill:white;stroke:red;stroke-width:2"/>
<!--关闭标签的作用是关闭 SVG 元素和文档本身。-->
</svg>